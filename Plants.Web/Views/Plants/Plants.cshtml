@model  Plants.Web.Models.ViewModels.ItemsViewModel<Dictionary<string, int>, int?>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2>Add a Plant: @Model.Item</h2>

<div data-ng-controller="PlantController as plantCtrl" data-ng-cloak>
    {{plantCtrl.newPlant}}
        {{plantCtrl.newPlantId}}
    <form id="plantForm"
          name="plantCtrl.queryForm"
          novalidate>

        <div class="form-group inputField"
             ng-class="plantCtrl.hasErrorClass(plantCtrl.queryForm.name.$valid)">
            <input type="text"
                   data-ng-model="plantCtrl.newPlant.Name"
                   placeholder="Name of Plant"
                   name="name"
                   id="name"
                   class="form-control"
                   ng-minlength="2"
                   ng-maxlength="100"
                   autofocus
                   required />

            <div role="alert" class="help-inline error">
                <span class="error"
                      ng-show="plantCtrl.showNewPlantErrors && plantCtrl.queryForm.name.$error.required">Name is required</span>
                <span class="error"
                      ng-show="plantCtrl.showNewPlantErrors && plantCtrl.queryForm.name.$error.minlength">Too short! Name must be at least 2 chars</span>
                <span class="error"
                      ng-show="plantCtrl.showNewPlantErrors && plantCtrl.queryForm.name.$error.maxlength">Too long! Name must be less than 100 chars</span>
            </div>
        </div>

        <textarea data-ng-model="plantCtrl.newPlant.Description"
                  placeholder="Description of Plant"
                  name="description"
                  id="description"
                  class="form-control"></textarea>

        <br />
        <div class="form-group"
             ng-class="plantCtrl.hasErrorClass(plantCtrl.queryForm.categoryId.$valid)">
            <select class="dropdown col-sm-7"
                    name="categoryId"
                    id="categoryId"
                    data-ng-model="plantCtrl.newPlant.CategoryId"
                    data-ng-options="key for (key , value) in plantCtrl.categoryTypes">
                <option value="">-- Select Category --</option>
            </select>
            <div role="alert" class="help-inline error">
                <span class="error"
                      ng-show="plantCtrl.showNewPlantErrors && plantCtrl.showNewPlantTypeErrors()"><br /><br />Please select a Category</span>
            </div>
        </div>

        <br />
        <div class="form-group"
             ng-class="plantCtrl.hasErrorClass(plantCtrl.queryForm.sizeId.$valid)">
            <select class="dropdown col-sm-7"
                    name="sizeId"
                    id="sizeId"
                    data-ng-model="plantCtrl.newPlant.SizeId"
                    data-ng-options="key for (key , value) in plantCtrl.sizeTypes">
                <option value="">-- Select Size --</option>
            </select>
            <div role="alert" class="help-inline error">
                <span class="error"
                      ng-show="plantCtrl.showNewPlantErrors && plantCtrl.showNewPlantTypeErrors()">
                    <br /><br />Please select a Size
                </span>
            </div>
        </div>

        <br />
        <label>
            Bioluminescence:
            <input type="checkbox"
                   data-ng-model="plantCtrl.newPlant.IsBioluminescent"
                   name="isBioluminescent"
                   id="isBioluminescent"
                   ng-true-value="'True'"
                   ng-false-value="'False'" />
        </label>
        <br /><br />

        <button type="button"
                id="cmdResetQuestion"
                class="btn btn-sm"
                ng-click="plantCtrl.resetQueryForm()">
            <i class="ace-icon fa fa-times"></i>
            Cancel
        </button>
        <button type="submit"
                id="cmdAddQuestion"
                class="btn btn-sm btn-primary"
                ng-click="plantCtrl.submit()">
            <i class="ace-icon fa fa-check"></i>
            Submit
        </button>
    </form>
</div>

@section scripts {

    <script type="text/javascript">
        // Store ViewModel items in variables
        myApp.page.plantId = @Html.RawJson(Model.Item);
        myApp.page.sizeTypes = @Html.RawJson(Model.Items[0]);
        myApp.page.categoryTypes = @Html.RawJson(Model.Items[1]);
    </script>

    <script src="~/Scripts/myApp.services.plants.js"></script>

    <script type="text/javascript">
        /**
         * PlantServiceFactory Factory
         * @@namespace Factories
         */
        (function () {
            'use strict';

            angular.module(APPNAME)
                 .factory('plantService', plantService);

            plantService.$inject = ['$baseService', '$myApp'];

            /**
             * @@namespace plantService
             * @@desc Plant services
             * @@memberOf Factories
             */
            function plantService($baseService, $myApp) {
                var aServiceObject = myApp.services.plants;
                var newService = $baseService.merge(true, {}, aServiceObject, $baseService);
                return newService;
            }
        })();

        /**
         * PlantController Controller
         * @@namespace Controllers
         */
        (function () {
            'use strict';

            angular.module(APPNAME)
                .controller('PlantController', PlantController);

            PlantController.$inject = [
                  '$scope'
                , '$baseController'
                , 'plantService'
            ];

            /**
             * @@namespace PlantController
             * @@desc Plant controller for add and update
             * @@memberOf Controllers
             */
            function PlantController(
                  $scope
                , $baseController
                , plantService
                ) {

                var vm = this;

                // Bindable Members
                $baseController.merge(vm, $baseController);
                vm.$scope = $scope;
                vm.plantService = plantService;
                vm.notify = vm.plantService.getNotifier($scope);

                vm.categoryTypes = myApp.page.categoryTypes;
                vm.newPlant = {};
                vm.newPlantId = myApp.page.plantId || {};
                vm.queryForm = null;
                vm.showNewPlantErrors = false;
                vm.sizeTypes = myApp.page.sizeTypes;

                vm.getPlant = _getPlant;
                vm.groupTypeShowError = _groupTypeShowError;
                vm.heightTypeShowError = _heightTypeShowError;
                vm.hasErrorClass = _hasErrorClass;
                vm.onAddPlantError = _onAddPlantError;
                vm.onAddPlantSuccess = _onAddPlantSuccess;
                vm.onGetPlantError = _onGetPlantError;
                vm.onGetPlantSuccess = _onGetPlantSuccess;
                vm.onUpdatePlantError = _onUpdatePlantError;
                vm.onUpdatePlantSuccess = _onUpdatePlantSuccess;
                vm.resetQueryForm = _resetQueryForm;
                vm.showNewQuestionTypeErrors = _showNewQuestionTypeErrors;
                vm.submit = _submit;


                render();

                function render() {
                    vm.getPlant(vm.newPlantId);
                }

                function _getPlant(plantId) {
                    if (plantId === parseInt(plantId, 10)) {
                        vm.plantService.getById(plantId, vm.onGetPlantSuccess, vm.onGetPlantError);
                    }
                }

                function _groupTypeShowError(data) {
                    if (vm.updatedQuestion.typeId == 6 && data == null) {
                        return 'Please select a value for this field.';
                    }
                }

                function _heightTypeShowError(data) {
                    if (vm.updatedQuestion.typeId == 6 && data == null) {
                        return 'Please select a value for this field.';
                    }
                }

                function _hasErrorClass(valid) {
                    // If form input not valid and has errors, return has-error class
                    if (valid == false && vm.showNewPlantErrors == true) {
                        return 'has-error';
                    } else if (valid == true) {
                        return '';
                    }
                }

                function _onAddPlantError(jqXHR, textStatus, errorThrown) {
                    vm.$log.log(error)
                    vm.$alertService.error('There was a problem with the submit request. Please try again.');
                }

                function _onAddPlantSuccess(data, status, xhr) {
                    vm.notify(function () {
                        if (data && data.Item) {
                            vm.newPlantId = data.Item;
                            vm.$alertService.success('Successfully submitted plant.');
                        }
                    });
                }

                function _onGetPlantError(jqXHR, textStatus, errorThrown) {
                    vm.$log.log(error)
                }

                function _onGetPlantSuccess(data, status, xhr) {
                    vm.notify(function () {
                        if (data && data.Item) {
                            vm.newPlant = data.Item;
                        }
                    });
                }

                function _onUpdatePlantError(jqXHR, textStatus, errorThrown) {
                    vm.$log.log(error)
                    vm.$alertService.error('There was a problem with the update request. Please try again.');
                }

                function _onUpdatePlantSuccess(data, status, xhr){
                    vm.notify(function () {
                        if (data) {
                            vm.$alertService.success('Successfully updated plant');
                        }
                    });
                }

                function _resetQueryForm() {
                    vm.showNewPlantErrors = false;
                    vm.newPlant = {};
                    vm.queryForm.$setPristine();
                    vm.queryForm.$setUntouched()
                }

                function _showNewQuestionTypeErrors() {
                    if (!vm.newPlant.typeId) {
                        return true;
                    } else {
                        return false;
                    }
                }

                function _submit() {
                    vm.showNewPlantErrors = true;

                    // If form not valid, then exit out of method
                    if (!vm.queryForm.$valid) {
                        return;
                    }

                    // If no plantId, then call POST request, else call PUT request
                    if (vm.newPlantId !== parseInt(vm.newPlantId, 10)) {
                        vm.plantService.add(vm.newPlant, vm.onAddPlantSuccess, vm.onAddPlantError);
                    }
                    else {
                        vm.newPlant.Id = vm.newPlantId;
                        vm.plantService.update(vm.newPlantId, vm.newPlant, vm.onUpdatePlantSuccess,
                            vm.onUpdatePlantError);
                    }
                };

            }
        })();
    </script>
}
